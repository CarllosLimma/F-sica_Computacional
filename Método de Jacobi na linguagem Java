/*
 * Autor: Carlos Eduardo da Silva Lima 
 * Tema: Método de Jacobi
 * Data: 03/04/2021
 * 
 * */
public class JacobiA
{
 public static void main(String[] args) 
 {
 int n = 3;
 double TOL = 0.01;
 double x0[][] = new double[n][1];
 x0[0][0] = 0;
 x0[1][0] = 0;
 x0[2][0] = 0;
 // TODO Auto-generated method stub
 JacobiB s = new JacobiB();
 s.jacobi(x0, TOL);
 }// fim do método main
}//Fim da classe JacobiA
***********************************************************************
/*
 * Autor: Carlos Eduardo da Silva Lima 
 * Tema: Método de Jacobi
 * Data: 03/04/2021
 * 
 * */
import javax.swing.JOptionPane; // Importação da classe JoptionPane
public class JacobiB 
{
 int n = 3;
 // Cálculo da Multiplicação de Matrizes 
 public double[][] MultiplicaMatriz(double a[][], double b[][])
 {
 double c[][] = new double[n+1][1]; // n+1 linhas por 1 coluna
 for(int i = 0; i<n; i++)
 {
 for(int j = 0; j<n; j++)
 {
 c[i][0] = 0;
 for(int k = 0; k<n; k++)
 {
 c[i][0] += a[i][k]*b[k][0]; 
 }
 }
 }
 return c;
     } 
 public void jacobi(double x0[][], double TOL)
 {
 double C[][] = new double[n][n];
 C[0][0] = 0;
 C[0][1] = -0.2;
    C[0][2] = -0.3;
 C[1][0] = -0.2;
 C[1][1] = 0;
    C[1][2] = -0.2;
 C[2][0] = -0.2;
 C[2][1] = -0.3;
    C[2][2] = 0;
    double G[][]  = new double[n][1];
 G[0][0] = 0.7;
 G[1][0] = -1.6;
    G[2][0] = 0.6;
    //
    double x[][]  = new double[n][1];
   //Chute
    x[0][0] = x0[0][0];
    x[1][0] = x0[1][0];
    x[2][0] = x0[2][0];
    int i = 0;
    while(i<1000) 
    {
     i++;
     x[0][0] = MultiplicaMatriz(C,x)[0][0] + G[0][0];
     x[1][0] = MultiplicaMatriz(C,x)[1][0] + G[1][0];
     x[2][0] = MultiplicaMatriz(C,x)[2][0] + G[2][0];
     System.out.println(i+" || x1 = "+x[0][0]+" || x2 = "+x[1][0]+" || x3 = "+x[2][0] );
    }// fim do loop
    // Caíxa de diálogo - Saída da solução final 
  JOptionPane.showMessageDialog(null,"Solução\nx1 = "+x[0][0]+"\nx2 = "+x[1][0]+"\nx3 = "+x[2][0]);
   }// fim do método
}//Fim da classe JacobiB
